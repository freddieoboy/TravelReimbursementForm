<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_333297_v2_travel_v2_travel_reimbursement</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>StartDate needs to be before today</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	// Instantiate the NeedItUtils class.  Call the isDatePast method and pass
	// the u_when_needed value.
	var manDates = new ManageDates();
	var isPast = manDates.isDatePast(current.start_date);
	
	/*
	// If the isDatePast method returns true, the date is in the past.
	if(isPast == true){
		gs.addErrorMessage("When needed date cannot be in the past.  Your request has not been saved to the database.");
		current.setAbortAction(true);
	}
	
	
	// pass the When needed field value to the isDateToday method in NeedItUtils
	var isToday = manDates.isDateToday(current.start_date);
	
	// if the isDateToday method returns true the When needed date is today 
	if(isToday == true){
		gs.addErrorMessage("You cannot submit NeedIt requests for today.");
		current.setAbortAction(true);
	}
	*/
	var sStartDateBeforeORequalToEndDate = manDates.isStartDateBeforeORequalToEndDate(current.start_date, current.end_date);
	
	if (sStartDateBeforeORequalToEndDate == false ) {
		gs.addErrorMessage("Start Date must be before or equal to End Date and must be before today");
		current.setAbortAction(true);
		
	}
	
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-04-14 21:37:31</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>28997275dbf87300c10ff36f29961974</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>StartDate needs to be before today</sys_name>
        <sys_overrides/>
        <sys_package display_value="v2 TravelReimbursement" source="x_333297_v2_travel">e0229663db287300c10ff36f299619b6</sys_package>
        <sys_policy/>
        <sys_scope display_value="v2 TravelReimbursement">e0229663db287300c10ff36f299619b6</sys_scope>
        <sys_update_name>sys_script_28997275dbf87300c10ff36f29961974</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-04-14 22:12:39</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=28997275dbf87300c10ff36f29961974"/>
</record_update>
